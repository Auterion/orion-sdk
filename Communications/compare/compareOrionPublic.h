// compareOrionPublic.h was generated by ProtoGen version 2.11.c

#ifndef _COMPAREORIONPUBLIC_H
#define _COMPAREORIONPUBLIC_H

#include "OrionPublicPacket.h"
#include <QString>

//! Compare two OrionFlirSettings_t structures and generate a report
QString compareOrionFlirSettings_t(QString prename, const OrionFlirSettings_t* user1, const OrionFlirSettings_t* user2);

//! Compare two OrionFlirSettings packets and generate a report
QString compareOrionFlirSettingsPacket(const void* pkt1, const void* pkt2);

//! Compare two OrionAptinaSettings_t structures and generate a report
QString compareOrionAptinaSettings_t(QString prename, const OrionAptinaSettings_t* user1, const OrionAptinaSettings_t* user2);

//! Compare two OrionAptinaSettings packets and generate a report
QString compareOrionAptinaSettingsPacket(const void* pkt1, const void* pkt2);

//! Compare two OrionZafiroSettings_t structures and generate a report
QString compareOrionZafiroSettings_t(QString prename, const OrionZafiroSettings_t* user1, const OrionZafiroSettings_t* user2);

//! Compare two OrionZafiroSettings packets and generate a report
QString compareOrionZafiroSettingsPacket(const void* pkt1, const void* pkt2);

//! Compare two OrionHitachiSettings_t structures and generate a report
QString compareOrionHitachiSettings_t(QString prename, const OrionHitachiSettings_t* user1, const OrionHitachiSettings_t* user2);

//! Compare two OrionHitachiSettings packets and generate a report
QString compareOrionHitachiSettingsPacket(const void* pkt1, const void* pkt2);

//! Compare two OrionSonySettings_t structures and generate a report
QString compareOrionSonySettings_t(QString prename, const OrionSonySettings_t* user1, const OrionSonySettings_t* user2);

//! Compare two OrionSonySettings packets and generate a report
QString compareOrionSonySettingsPacket(const void* pkt1, const void* pkt2);

//! Compare two OrionUartConfig_t structures and generate a report
QString compareOrionUartConfig_t(QString prename, const OrionUartConfig_t* user1, const OrionUartConfig_t* user2);

//! Compare two OrionUartConfig packets and generate a report
QString compareOrionUartConfigPacket(const void* pkt1, const void* pkt2);

//! Compare two OrionLimitsData_t structures and generate a report
QString compareOrionLimitsData_t(QString prename, const OrionLimitsData_t* user1, const OrionLimitsData_t* user2);

//! Compare two OrionLimitsData packets and generate a report
QString compareOrionLimitsDataPacket(const void* pkt1, const void* pkt2);

//! Compare two InsOptions_t structures and generate a report
QString compareInsOptions_t(QString prename, const InsOptions_t* user1, const InsOptions_t* user2);

//! Compare two InsOptions packets and generate a report
QString compareInsOptionsPacket(const void* pkt1, const void* pkt2);

//! Compare two OrionNetworkSettings_t structures and generate a report
QString compareOrionNetworkSettings_t(QString prename, const OrionNetworkSettings_t* user1, const OrionNetworkSettings_t* user2);

//! Compare two OrionNetworkSettings packets and generate a report
QString compareOrionNetworkSettingsPacket(const void* pkt1, const void* pkt2);

//! Compare two OrionNetworkVideo_t structures and generate a report
QString compareOrionNetworkVideo_t(QString prename, const OrionNetworkVideo_t* user1, const OrionNetworkVideo_t* user2);

//! Compare two OrionNetworkVideo packets and generate a report
QString compareOrionNetworkVideoPacket(const void* pkt1, const void* pkt2);

//! Compare two OrionCameras_t structures and generate a report
QString compareOrionCameras_t(QString prename, const OrionCameras_t* user1, const OrionCameras_t* user2);

//! Compare two OrionCameras packets and generate a report
QString compareOrionCamerasPacket(const void* pkt1, const void* pkt2);

#endif
