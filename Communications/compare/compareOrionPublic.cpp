// compareOrionPublic.cpp was generated by ProtoGen version 2.11.a

#include "compareOrionPublic.h"

/*!
 * Compare two OrionFlirSettings_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionFlirSettings_t(QString prename, const OrionFlirSettings_t* user1, const OrionFlirSettings_t* user2)
{
    QString report;

    if(user1->Index != user2->Index)
        report += prename + ":Index"  + " '" + QString::number(user1->Index) + "' '" + QString::number(user2->Index) + "'\n";

    if(user1->NucType != user2->NucType)
        report += prename + ":NucType"  + " '" + QString::number(user1->NucType) + "' '" + QString::number(user2->NucType) + "'\n";

    if(user1->BlackHot != user2->BlackHot)
        report += prename + ":BlackHot"  + " '" + QString::number(user1->BlackHot) + "' '" + QString::number(user2->BlackHot) + "'\n";

    if(user1->MaxAgcGain != user2->MaxAgcGain)
        report += prename + ":MaxAgcGain"  + " '" + QString::number(user1->MaxAgcGain) + "' '" + QString::number(user2->MaxAgcGain) + "'\n";

    if(user1->AceLevel != user2->AceLevel)
        report += prename + ":AceLevel"  + " '" + QString::number(user1->AceLevel) + "' '" + QString::number(user2->AceLevel) + "'\n";

    if(user1->DdeThreshold != user2->DdeThreshold)
        report += prename + ":DdeThreshold"  + " '" + QString::number(user1->DdeThreshold) + "' '" + QString::number(user2->DdeThreshold) + "'\n";

    if(user1->AgcMidpoint != user2->AgcMidpoint)
        report += prename + ":AgcMidpoint"  + " '" + QString::number(user1->AgcMidpoint) + "' '" + QString::number(user2->AgcMidpoint) + "'\n";

    if(user1->IntegrationTime != user2->IntegrationTime)
        report += prename + ":IntegrationTime"  + " '" + QString::number(user1->IntegrationTime, 'g', 16) + "' '" + QString::number(user2->IntegrationTime, 'g', 16) + "'\n";

    return report;

}// compareOrionFlirSettings_t

/*!
 * Compare two OrionFlirSettings packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionFlirSettingsPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionFlirSettings_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionFlirSettingsPacketStructure(pkt1, &struct1) || !decodeOrionFlirSettingsPacketStructure(pkt2, &struct2))
    {
        report = "OrionFlirSettings packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionFlirSettings packet sizes are different\n";

    report += compareOrionFlirSettings_t("name", &struct1, &struct2);

    return report;

}// compareOrionFlirSettingsPacket

/*!
 * Compare two OrionAptinaSettings_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionAptinaSettings_t(QString prename, const OrionAptinaSettings_t* user1, const OrionAptinaSettings_t* user2)
{
    QString report;

    if(user1->Index != user2->Index)
        report += prename + ":Index"  + " '" + QString::number(user1->Index) + "' '" + QString::number(user2->Index) + "'\n";

    if(user1->MinExposure != user2->MinExposure)
        report += prename + ":MinExposure"  + " '" + QString::number(user1->MinExposure, 'g', 16) + "' '" + QString::number(user2->MinExposure, 'g', 16) + "'\n";

    if(user1->MaxExposure != user2->MaxExposure)
        report += prename + ":MaxExposure"  + " '" + QString::number(user1->MaxExposure, 'g', 16) + "' '" + QString::number(user2->MaxExposure, 'g', 16) + "'\n";

    if(user1->MinGain != user2->MinGain)
        report += prename + ":MinGain"  + " '" + QString::number(user1->MinGain, 'g', 16) + "' '" + QString::number(user2->MinGain, 'g', 16) + "'\n";

    if(user1->MaxGain != user2->MaxGain)
        report += prename + ":MaxGain"  + " '" + QString::number(user1->MaxGain, 'g', 16) + "' '" + QString::number(user2->MaxGain, 'g', 16) + "'\n";

    if(user1->Brightness != user2->Brightness)
        report += prename + ":Brightness"  + " '" + QString::number(user1->Brightness) + "' '" + QString::number(user2->Brightness) + "'\n";

    if(user1->Contrast != user2->Contrast)
        report += prename + ":Contrast"  + " '" + QString::number(user1->Contrast, 'g', 16) + "' '" + QString::number(user2->Contrast, 'g', 16) + "'\n";

    if(user1->Saturation != user2->Saturation)
        report += prename + ":Saturation"  + " '" + QString::number(user1->Saturation, 'g', 16) + "' '" + QString::number(user2->Saturation, 'g', 16) + "'\n";

    if(user1->Sharpness != user2->Sharpness)
        report += prename + ":Sharpness"  + " '" + QString::number(user1->Sharpness, 'g', 16) + "' '" + QString::number(user2->Sharpness, 'g', 16) + "'\n";

    if(user1->DebugEnable != user2->DebugEnable)
        report += prename + ":DebugEnable"  + " '" + QString::number(user1->DebugEnable) + "' '" + QString::number(user2->DebugEnable) + "'\n";

    if(user1->Hue != user2->Hue)
        report += prename + ":Hue"  + " '" + QString::number(user1->Hue) + "' '" + QString::number(user2->Hue) + "'\n";

    return report;

}// compareOrionAptinaSettings_t

/*!
 * Compare two OrionAptinaSettings packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionAptinaSettingsPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionAptinaSettings_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionAptinaSettingsPacketStructure(pkt1, &struct1) || !decodeOrionAptinaSettingsPacketStructure(pkt2, &struct2))
    {
        report = "OrionAptinaSettings packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionAptinaSettings packet sizes are different\n";

    report += compareOrionAptinaSettings_t("name", &struct1, &struct2);

    return report;

}// compareOrionAptinaSettingsPacket

/*!
 * Compare two OrionZafiroSettings_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionZafiroSettings_t(QString prename, const OrionZafiroSettings_t* user1, const OrionZafiroSettings_t* user2)
{
    QString report;

    if(user1->Index != user2->Index)
        report += prename + ":Index"  + " '" + QString::number(user1->Index) + "' '" + QString::number(user2->Index) + "'\n";

    if(user1->BlackHot != user2->BlackHot)
        report += prename + ":BlackHot"  + " '" + QString::number(user1->BlackHot) + "' '" + QString::number(user2->BlackHot) + "'\n";

    if(user1->IntegrationTime != user2->IntegrationTime)
        report += prename + ":IntegrationTime"  + " '" + QString::number(user1->IntegrationTime, 'g', 16) + "' '" + QString::number(user2->IntegrationTime, 'g', 16) + "'\n";

    if(user1->LapEnabled != user2->LapEnabled)
        report += prename + ":LapEnabled"  + " '" + QString::number(user1->LapEnabled) + "' '" + QString::number(user2->LapEnabled) + "'\n";

    if(user1->LapGain != user2->LapGain)
        report += prename + ":LapGain"  + " '" + QString::number(user1->LapGain, 'g', 16) + "' '" + QString::number(user2->LapGain, 'g', 16) + "'\n";

    if(user1->AgcSaturation != user2->AgcSaturation)
        report += prename + ":AgcSaturation"  + " '" + QString::number(user1->AgcSaturation, 'g', 16) + "' '" + QString::number(user2->AgcSaturation, 'g', 16) + "'\n";

    return report;

}// compareOrionZafiroSettings_t

/*!
 * Compare two OrionZafiroSettings packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionZafiroSettingsPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionZafiroSettings_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionZafiroSettingsPacketStructure(pkt1, &struct1) || !decodeOrionZafiroSettingsPacketStructure(pkt2, &struct2))
    {
        report = "OrionZafiroSettings packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionZafiroSettings packet sizes are different\n";

    report += compareOrionZafiroSettings_t("name", &struct1, &struct2);

    return report;

}// compareOrionZafiroSettingsPacket

/*!
 * Compare two OrionHitachiSettings_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionHitachiSettings_t(QString prename, const OrionHitachiSettings_t* user1, const OrionHitachiSettings_t* user2)
{
    QString report;

    if(user1->Index != user2->Index)
        report += prename + ":Index"  + " '" + QString::number(user1->Index) + "' '" + QString::number(user2->Index) + "'\n";

    if(user1->IntegrationTime != user2->IntegrationTime)
        report += prename + ":IntegrationTime"  + " '" + QString::number(user1->IntegrationTime) + "' '" + QString::number(user2->IntegrationTime) + "'\n";

    if(user1->Aperture != user2->Aperture)
        report += prename + ":Aperture"  + " '" + QString::number(user1->Aperture, 'g', 16) + "' '" + QString::number(user2->Aperture, 'g', 16) + "'\n";

    if(user1->Sharpness != user2->Sharpness)
        report += prename + ":Sharpness"  + " '" + QString::number(user1->Sharpness, 'g', 16) + "' '" + QString::number(user2->Sharpness, 'g', 16) + "'\n";

    return report;

}// compareOrionHitachiSettings_t

/*!
 * Compare two OrionHitachiSettings packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionHitachiSettingsPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionHitachiSettings_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionHitachiSettingsPacketStructure(pkt1, &struct1) || !decodeOrionHitachiSettingsPacketStructure(pkt2, &struct2))
    {
        report = "OrionHitachiSettings packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionHitachiSettings packet sizes are different\n";

    report += compareOrionHitachiSettings_t("name", &struct1, &struct2);

    return report;

}// compareOrionHitachiSettingsPacket

/*!
 * Compare two OrionSonySettings_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionSonySettings_t(QString prename, const OrionSonySettings_t* user1, const OrionSonySettings_t* user2)
{
    QString report;

    if(user1->Index != user2->Index)
        report += prename + ":Index"  + " '" + QString::number(user1->Index) + "' '" + QString::number(user2->Index) + "'\n";

    if(user1->MinExposure != user2->MinExposure)
        report += prename + ":MinExposure"  + " '" + QString::number(user1->MinExposure, 'g', 16) + "' '" + QString::number(user2->MinExposure, 'g', 16) + "'\n";

    if(user1->MaxExposure != user2->MaxExposure)
        report += prename + ":MaxExposure"  + " '" + QString::number(user1->MaxExposure, 'g', 16) + "' '" + QString::number(user2->MaxExposure, 'g', 16) + "'\n";

    if(user1->MinGain != user2->MinGain)
        report += prename + ":MinGain"  + " '" + QString::number(user1->MinGain) + "' '" + QString::number(user2->MinGain) + "'\n";

    if(user1->MaxGain != user2->MaxGain)
        report += prename + ":MaxGain"  + " '" + QString::number(user1->MaxGain) + "' '" + QString::number(user2->MaxGain) + "'\n";

    if(user1->Brightness != user2->Brightness)
        report += prename + ":Brightness"  + " '" + QString::number(user1->Brightness) + "' '" + QString::number(user2->Brightness) + "'\n";

    if(user1->Contrast != user2->Contrast)
        report += prename + ":Contrast"  + " '" + QString::number(user1->Contrast, 'g', 16) + "' '" + QString::number(user2->Contrast, 'g', 16) + "'\n";

    if(user1->Saturation != user2->Saturation)
        report += prename + ":Saturation"  + " '" + QString::number(user1->Saturation, 'g', 16) + "' '" + QString::number(user2->Saturation, 'g', 16) + "'\n";

    if(user1->Sharpness != user2->Sharpness)
        report += prename + ":Sharpness"  + " '" + QString::number(user1->Sharpness, 'g', 16) + "' '" + QString::number(user2->Sharpness, 'g', 16) + "'\n";

    if(user1->FrameRate != user2->FrameRate)
        report += prename + ":FrameRate"  + " '" + QString::number(user1->FrameRate, 'g', 16) + "' '" + QString::number(user2->FrameRate, 'g', 16) + "'\n";

    return report;

}// compareOrionSonySettings_t

/*!
 * Compare two OrionSonySettings packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionSonySettingsPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionSonySettings_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionSonySettingsPacketStructure(pkt1, &struct1) || !decodeOrionSonySettingsPacketStructure(pkt2, &struct2))
    {
        report = "OrionSonySettings packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionSonySettings packet sizes are different\n";

    report += compareOrionSonySettings_t("name", &struct1, &struct2);

    return report;

}// compareOrionSonySettingsPacket

/*!
 * Compare two OrionUartConfig_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionUartConfig_t(QString prename, const OrionUartConfig_t* user1, const OrionUartConfig_t* user2)
{
    QString report;

    if(user1->port != user2->port)
        report += prename + ":port"  + " '" + QString::number(user1->port) + "' '" + QString::number(user2->port) + "'\n";

    if(user1->baud != user2->baud)
        report += prename + ":baud"  + " '" + QString::number(user1->baud) + "' '" + QString::number(user2->baud) + "'\n";

    if(user1->protocol != user2->protocol)
        report += prename + ":protocol"  + " '" + QString::number(user1->protocol) + "' '" + QString::number(user2->protocol) + "'\n";

    return report;

}// compareOrionUartConfig_t

/*!
 * Compare two OrionUartConfig packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionUartConfigPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionUartConfig_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionUartConfigPacketStructure(pkt1, &struct1) || !decodeOrionUartConfigPacketStructure(pkt2, &struct2))
    {
        report = "OrionUartConfig packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionUartConfig packet sizes are different\n";

    report += compareOrionUartConfig_t("name", &struct1, &struct2);

    return report;

}// compareOrionUartConfigPacket

/*!
 * Compare two OrionLimitsData_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionLimitsData_t(QString prename, const OrionLimitsData_t* user1, const OrionLimitsData_t* user2)
{
    QString report;
    int i = 0;

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->MinPos[i] != user2->MinPos[i])
            report += prename + ":MinPos"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->MinPos[i], 'g', 16) + "' '" + QString::number(user2->MinPos[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->MaxPos[i] != user2->MaxPos[i])
            report += prename + ":MaxPos"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->MaxPos[i], 'g', 16) + "' '" + QString::number(user2->MaxPos[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->MaxVel[i] != user2->MaxVel[i])
            report += prename + ":MaxVel"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->MaxVel[i], 'g', 16) + "' '" + QString::number(user2->MaxVel[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->MaxAccel[i] != user2->MaxAccel[i])
            report += prename + ":MaxAccel"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->MaxAccel[i], 'g', 16) + "' '" + QString::number(user2->MaxAccel[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->ContCur[i] != user2->ContCur[i])
            report += prename + ":ContCur"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->ContCur[i], 'g', 16) + "' '" + QString::number(user2->ContCur[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->PeakCur[i] != user2->PeakCur[i])
            report += prename + ":PeakCur"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->PeakCur[i], 'g', 16) + "' '" + QString::number(user2->PeakCur[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->PeakCurTime[i] != user2->PeakCurTime[i])
            report += prename + ":PeakCurTime"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->PeakCurTime[i], 'g', 16) + "' '" + QString::number(user2->PeakCurTime[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->InitCur[i] != user2->InitCur[i])
            report += prename + ":InitCur"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->InitCur[i], 'g', 16) + "' '" + QString::number(user2->InitCur[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->MaxPower[i] != user2->MaxPower[i])
            report += prename + ":MaxPower"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->MaxPower[i], 'g', 16) + "' '" + QString::number(user2->MaxPower[i], 'g', 16) + "'\n";

    return report;

}// compareOrionLimitsData_t

/*!
 * Compare two OrionLimitsData packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionLimitsDataPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionLimitsData_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionLimitsDataPacketStructure(pkt1, &struct1) || !decodeOrionLimitsDataPacketStructure(pkt2, &struct2))
    {
        report = "OrionLimitsData packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionLimitsData packet sizes are different\n";

    report += compareOrionLimitsData_t("name", &struct1, &struct2);

    return report;

}// compareOrionLimitsDataPacket

/*!
 * Compare two InsOptions_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareInsOptions_t(QString prename, const InsOptions_t* user1, const InsOptions_t* user2)
{
    QString report;
    int i = 0;

    if(user1->enablePlatformRotation != user2->enablePlatformRotation)
        report += prename + ":enablePlatformRotation"  + " '" + QString::number(user1->enablePlatformRotation) + "' '" + QString::number(user2->enablePlatformRotation) + "'\n";

    if(user1->enableCourseIsHeading != user2->enableCourseIsHeading)
        report += prename + ":enableCourseIsHeading"  + " '" + QString::number(user1->enableCourseIsHeading) + "' '" + QString::number(user2->enableCourseIsHeading) + "'\n";

    if(user1->disableMagnetometer != user2->disableMagnetometer)
        report += prename + ":disableMagnetometer"  + " '" + QString::number(user1->disableMagnetometer) + "' '" + QString::number(user2->disableMagnetometer) + "'\n";

    if(user1->disableGPS != user2->disableGPS)
        report += prename + ":disableGPS"  + " '" + QString::number(user1->disableGPS) + "' '" + QString::number(user2->disableGPS) + "'\n";

    if(user1->resetINS != user2->resetINS)
        report += prename + ":resetINS"  + " '" + QString::number(user1->resetINS) + "' '" + QString::number(user2->resetINS) + "'\n";

    if(user1->disableGpsClockError != user2->disableGpsClockError)
        report += prename + ":disableGpsClockError"  + " '" + QString::number(user1->disableGpsClockError) + "' '" + QString::number(user2->disableGpsClockError) + "'\n";

    if(user1->enableAccelBias != user2->enableAccelBias)
        report += prename + ":enableAccelBias"  + " '" + QString::number(user1->enableAccelBias) + "' '" + QString::number(user2->enableAccelBias) + "'\n";

    if(user1->enableTightlyCoupled != user2->enableTightlyCoupled)
        report += prename + ":enableTightlyCoupled"  + " '" + QString::number(user1->enableTightlyCoupled) + "' '" + QString::number(user2->enableTightlyCoupled) + "'\n";

    if(user1->usePhaseForVelocity != user2->usePhaseForVelocity)
        report += prename + ":usePhaseForVelocity"  + " '" + QString::number(user1->usePhaseForVelocity) + "' '" + QString::number(user2->usePhaseForVelocity) + "'\n";

    if(user1->disableL1 != user2->disableL1)
        report += prename + ":disableL1"  + " '" + QString::number(user1->disableL1) + "' '" + QString::number(user2->disableL1) + "'\n";

    if(user1->disableL2 != user2->disableL2)
        report += prename + ":disableL2"  + " '" + QString::number(user1->disableL2) + "' '" + QString::number(user2->disableL2) + "'\n";

    if(user1->disableL5 != user2->disableL5)
        report += prename + ":disableL5"  + " '" + QString::number(user1->disableL5) + "' '" + QString::number(user2->disableL5) + "'\n";

    if(user1->elevationMask != user2->elevationMask)
        report += prename + ":elevationMask"  + " '" + QString::number(user1->elevationMask, 'g', 16) + "' '" + QString::number(user2->elevationMask, 'g', 16) + "'\n";

    if(user1->enablePayloadIns != user2->enablePayloadIns)
        report += prename + ":enablePayloadIns"  + " '" + QString::number(user1->enablePayloadIns) + "' '" + QString::number(user2->enablePayloadIns) + "'\n";

    if(user1->enableNonLinearHeading != user2->enableNonLinearHeading)
        report += prename + ":enableNonLinearHeading"  + " '" + QString::number(user1->enableNonLinearHeading) + "' '" + QString::number(user2->enableNonLinearHeading) + "'\n";

    if(user1->enableSensonorMV != user2->enableSensonorMV)
        report += prename + ":enableSensonorMV"  + " '" + QString::number(user1->enableSensonorMV) + "' '" + QString::number(user2->enableSensonorMV) + "'\n";

    for(i = 0; i < NUM_AXES; i++)
        if(user1->gimbalToPlatformEuler[i] != user2->gimbalToPlatformEuler[i])
            report += prename + ":gimbalToPlatformEuler"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->gimbalToPlatformEuler[i], 'g', 16) + "' '" + QString::number(user2->gimbalToPlatformEuler[i], 'g', 16) + "'\n";

    if(user1->initialHeading != user2->initialHeading)
        report += prename + ":initialHeading"  + " '" + QString::number(user1->initialHeading, 'g', 16) + "' '" + QString::number(user2->initialHeading, 'g', 16) + "'\n";

    for(i = 0; i < 3; i++)
        if(user1->gpsLeverArm[i] != user2->gpsLeverArm[i])
            report += prename + ":gpsLeverArm"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->gpsLeverArm[i], 'g', 16) + "' '" + QString::number(user2->gpsLeverArm[i], 'g', 16) + "'\n";

    if(user1->headingObservationBiasAngle != user2->headingObservationBiasAngle)
        report += prename + ":headingObservationBiasAngle"  + " '" + QString::number(user1->headingObservationBiasAngle, 'g', 16) + "' '" + QString::number(user2->headingObservationBiasAngle, 'g', 16) + "'\n";

    return report;

}// compareInsOptions_t

/*!
 * Compare two InsOptions packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareInsOptionsPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    InsOptions_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeInsOptionsPacketStructure(pkt1, &struct1) || !decodeInsOptionsPacketStructure(pkt2, &struct2))
    {
        report = "InsOptions packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "InsOptions packet sizes are different\n";

    report += compareInsOptions_t("name", &struct1, &struct2);

    return report;

}// compareInsOptionsPacket

/*!
 * Compare two OrionNetworkSettings_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionNetworkSettings_t(QString prename, const OrionNetworkSettings_t* user1, const OrionNetworkSettings_t* user2)
{
    QString report;

    if(user1->Ip != user2->Ip)
        report += prename + ":Ip"  + " '" + QString::number(user1->Ip) + "' '" + QString::number(user2->Ip) + "'\n";

    if(user1->Mask != user2->Mask)
        report += prename + ":Mask"  + " '" + QString::number(user1->Mask) + "' '" + QString::number(user2->Mask) + "'\n";

    if(user1->Gateway != user2->Gateway)
        report += prename + ":Gateway"  + " '" + QString::number(user1->Gateway) + "' '" + QString::number(user2->Gateway) + "'\n";

    if(user1->LowDelay != user2->LowDelay)
        report += prename + ":LowDelay"  + " '" + QString::number(user1->LowDelay) + "' '" + QString::number(user2->LowDelay) + "'\n";

    if(user1->Mtu != user2->Mtu)
        report += prename + ":Mtu"  + " '" + QString::number(user1->Mtu) + "' '" + QString::number(user2->Mtu) + "'\n";

    return report;

}// compareOrionNetworkSettings_t

/*!
 * Compare two OrionNetworkSettings packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionNetworkSettingsPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionNetworkSettings_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionNetworkSettingsPacketStructure(pkt1, &struct1) || !decodeOrionNetworkSettingsPacketStructure(pkt2, &struct2))
    {
        report = "OrionNetworkSettings packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionNetworkSettings packet sizes are different\n";

    report += compareOrionNetworkSettings_t("name", &struct1, &struct2);

    return report;

}// compareOrionNetworkSettingsPacket

/*!
 * Compare two OrionNetworkVideo_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionNetworkVideo_t(QString prename, const OrionNetworkVideo_t* user1, const OrionNetworkVideo_t* user2)
{
    QString report;

    if(user1->DestIp != user2->DestIp)
        report += prename + ":DestIp"  + " '" + QString::number(user1->DestIp) + "' '" + QString::number(user2->DestIp) + "'\n";

    if(user1->Port != user2->Port)
        report += prename + ":Port"  + " '" + QString::number(user1->Port) + "' '" + QString::number(user2->Port) + "'\n";

    if(user1->Bitrate != user2->Bitrate)
        report += prename + ":Bitrate"  + " '" + QString::number(user1->Bitrate) + "' '" + QString::number(user2->Bitrate) + "'\n";

    if(user1->Ttl != user2->Ttl)
        report += prename + ":Ttl"  + " '" + QString::number(user1->Ttl) + "' '" + QString::number(user2->Ttl) + "'\n";

    if(user1->StreamType != user2->StreamType)
        report += prename + ":StreamType"  + " '" + QString::number(user1->StreamType) + "' '" + QString::number(user2->StreamType) + "'\n";

    if(user1->MjpegQuality != user2->MjpegQuality)
        report += prename + ":MjpegQuality"  + " '" + QString::number(user1->MjpegQuality) + "' '" + QString::number(user2->MjpegQuality) + "'\n";

    if(user1->SaveSettings != user2->SaveSettings)
        report += prename + ":SaveSettings"  + " '" + QString::number(user1->SaveSettings) + "' '" + QString::number(user2->SaveSettings) + "'\n";

    if(user1->TsPacketCount != user2->TsPacketCount)
        report += prename + ":TsPacketCount"  + " '" + QString::number(user1->TsPacketCount) + "' '" + QString::number(user2->TsPacketCount) + "'\n";

    return report;

}// compareOrionNetworkVideo_t

/*!
 * Compare two OrionNetworkVideo packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionNetworkVideoPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionNetworkVideo_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionNetworkVideoPacketStructure(pkt1, &struct1) || !decodeOrionNetworkVideoPacketStructure(pkt2, &struct2))
    {
        report = "OrionNetworkVideo packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionNetworkVideo packet sizes are different\n";

    report += compareOrionNetworkVideo_t("name", &struct1, &struct2);

    return report;

}// compareOrionNetworkVideoPacket

//! Compare two OrionCamSettings_t structures and generate a report
QString compareOrionCamSettings_t(QString prename, const OrionCamSettings_t* user1, const OrionCamSettings_t* user2);

/*!
 * Compare two OrionCamSettings_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionCamSettings_t(QString prename, const OrionCamSettings_t* user1, const OrionCamSettings_t* user2)
{
    QString report;
    int i = 0;

    if(user1->Type != user2->Type)
        report += prename + ":Type"  + " '" + QString::number(user1->Type) + "' '" + QString::number(user2->Type) + "'\n";

    if(user1->Proto != user2->Proto)
        report += prename + ":Proto"  + " '" + QString::number(user1->Proto) + "' '" + QString::number(user2->Proto) + "'\n";

    if(user1->MinFocalLength != user2->MinFocalLength)
        report += prename + ":MinFocalLength"  + " '" + QString::number(user1->MinFocalLength, 'g', 16) + "' '" + QString::number(user2->MinFocalLength, 'g', 16) + "'\n";

    if(user1->MaxFocalLength != user2->MaxFocalLength)
        report += prename + ":MaxFocalLength"  + " '" + QString::number(user1->MaxFocalLength, 'g', 16) + "' '" + QString::number(user2->MaxFocalLength, 'g', 16) + "'\n";

    if(user1->PixelPitch != user2->PixelPitch)
        report += prename + ":PixelPitch"  + " '" + QString::number(user1->PixelPitch, 'g', 16) + "' '" + QString::number(user2->PixelPitch, 'g', 16) + "'\n";

    if(user1->ArrayWidth != user2->ArrayWidth)
        report += prename + ":ArrayWidth"  + " '" + QString::number(user1->ArrayWidth) + "' '" + QString::number(user2->ArrayWidth) + "'\n";

    if(user1->ArrayHeight != user2->ArrayHeight)
        report += prename + ":ArrayHeight"  + " '" + QString::number(user1->ArrayHeight) + "' '" + QString::number(user2->ArrayHeight) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->AlignMin[i] != user2->AlignMin[i])
            report += prename + ":AlignMin"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->AlignMin[i], 'g', 16) + "' '" + QString::number(user2->AlignMin[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->AlignMax[i] != user2->AlignMax[i])
            report += prename + ":AlignMax"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->AlignMax[i], 'g', 16) + "' '" + QString::number(user2->AlignMax[i], 'g', 16) + "'\n";

    return report;

}// compareOrionCamSettings_t

/*!
 * Compare two OrionCameras_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionCameras_t(QString prename, const OrionCameras_t* user1, const OrionCameras_t* user2)
{
    QString report;
    int i = 0;

    if(user1->NumCameras != user2->NumCameras)
        report += prename + ":NumCameras"  + " '" + QString::number(user1->NumCameras) + "' '" + QString::number(user2->NumCameras) + "'\n";

    // Camera settings information
    for(i = 0; i < NUM_CAMERAS; i++)
        report += compareOrionCamSettings_t(prename + ":OrionCamSettings" + "[" + QString::number(i) + "]", &user1->OrionCamSettings[i], &user2->OrionCamSettings[i]);

    return report;

}// compareOrionCameras_t

/*!
 * Compare two OrionCameras packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionCamerasPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionCameras_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionCamerasPacketStructure(pkt1, &struct1) || !decodeOrionCamerasPacketStructure(pkt2, &struct2))
    {
        report = "OrionCameras packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionCameras packet sizes are different\n";

    report += compareOrionCameras_t("name", &struct1, &struct2);

    return report;

}// compareOrionCamerasPacket
// end of compareOrionPublic.cpp
