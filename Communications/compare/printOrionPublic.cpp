// printOrionPublic.cpp was generated by ProtoGen version 2.11.c

#include "printOrionPublic.h"

/*!
 * Generate a string that describes the contents of a OrionFlirSettings_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionFlirSettings_t(QString prename, const OrionFlirSettings_t* user)
{
    QString report;

    report += prename + ":Index"  + " '" + QString::number(user->Index) + "'\n";

    report += prename + ":NucType"  + " '" + QString::number(user->NucType) + "'\n";

    report += prename + ":BlackHot"  + " '" + QString::number(user->BlackHot) + "'\n";

    report += prename + ":MaxAgcGain"  + " '" + QString::number(user->MaxAgcGain) + "'\n";

    report += prename + ":AceLevel"  + " '" + QString::number(user->AceLevel) + "'\n";

    report += prename + ":DdeThreshold"  + " '" + QString::number(user->DdeThreshold) + "'\n";

    report += prename + ":AgcMidpoint"  + " '" + QString::number(user->AgcMidpoint) + "'\n";

    report += prename + ":IntegrationTime"  + " '" + QString::number(user->IntegrationTime, 'g', 16) + "'\n";

    return report;

}// textPrintOrionFlirSettings_t

/*!
 * Generate a string that describes the contents of a OrionFlirSettings packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionFlirSettingsPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionFlirSettings_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionFlirSettingsPacketStructure(pkt, &user))
    {
        report = "OrionFlirSettings packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionFlirSettings packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionFlirSettings_t("name", &user);

    return report;

}// textPrintOrionFlirSettingsPacket

/*!
 * Generate a string that describes the contents of a OrionAptinaSettings_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionAptinaSettings_t(QString prename, const OrionAptinaSettings_t* user)
{
    QString report;

    report += prename + ":Index"  + " '" + QString::number(user->Index) + "'\n";

    report += prename + ":MinExposure"  + " '" + QString::number(user->MinExposure, 'g', 16) + "'\n";

    report += prename + ":MaxExposure"  + " '" + QString::number(user->MaxExposure, 'g', 16) + "'\n";

    report += prename + ":MinGain"  + " '" + QString::number(user->MinGain, 'g', 16) + "'\n";

    report += prename + ":MaxGain"  + " '" + QString::number(user->MaxGain, 'g', 16) + "'\n";

    report += prename + ":Brightness"  + " '" + QString::number(user->Brightness) + "'\n";

    report += prename + ":Contrast"  + " '" + QString::number(user->Contrast, 'g', 16) + "'\n";

    report += prename + ":Saturation"  + " '" + QString::number(user->Saturation, 'g', 16) + "'\n";

    report += prename + ":Sharpness"  + " '" + QString::number(user->Sharpness, 'g', 16) + "'\n";

    report += prename + ":DebugEnable"  + " '" + QString::number(user->DebugEnable) + "'\n";

    report += prename + ":Hue"  + " '" + QString::number(user->Hue) + "'\n";

    return report;

}// textPrintOrionAptinaSettings_t

/*!
 * Generate a string that describes the contents of a OrionAptinaSettings packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionAptinaSettingsPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionAptinaSettings_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionAptinaSettingsPacketStructure(pkt, &user))
    {
        report = "OrionAptinaSettings packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionAptinaSettings packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionAptinaSettings_t("name", &user);

    return report;

}// textPrintOrionAptinaSettingsPacket

/*!
 * Generate a string that describes the contents of a OrionZafiroSettings_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionZafiroSettings_t(QString prename, const OrionZafiroSettings_t* user)
{
    QString report;

    report += prename + ":Index"  + " '" + QString::number(user->Index) + "'\n";

    report += prename + ":BlackHot"  + " '" + QString::number(user->BlackHot) + "'\n";

    report += prename + ":IntegrationTime"  + " '" + QString::number(user->IntegrationTime, 'g', 16) + "'\n";

    report += prename + ":LapEnabled"  + " '" + QString::number(user->LapEnabled) + "'\n";

    report += prename + ":LapGain"  + " '" + QString::number(user->LapGain, 'g', 16) + "'\n";

    report += prename + ":AgcSaturation"  + " '" + QString::number(user->AgcSaturation, 'g', 16) + "'\n";

    return report;

}// textPrintOrionZafiroSettings_t

/*!
 * Generate a string that describes the contents of a OrionZafiroSettings packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionZafiroSettingsPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionZafiroSettings_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionZafiroSettingsPacketStructure(pkt, &user))
    {
        report = "OrionZafiroSettings packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionZafiroSettings packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionZafiroSettings_t("name", &user);

    return report;

}// textPrintOrionZafiroSettingsPacket

/*!
 * Generate a string that describes the contents of a OrionHitachiSettings_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionHitachiSettings_t(QString prename, const OrionHitachiSettings_t* user)
{
    QString report;

    report += prename + ":Index"  + " '" + QString::number(user->Index) + "'\n";

    report += prename + ":IntegrationTime"  + " '" + QString::number(user->IntegrationTime) + "'\n";

    report += prename + ":Aperture"  + " '" + QString::number(user->Aperture, 'g', 16) + "'\n";

    report += prename + ":Sharpness"  + " '" + QString::number(user->Sharpness, 'g', 16) + "'\n";

    return report;

}// textPrintOrionHitachiSettings_t

/*!
 * Generate a string that describes the contents of a OrionHitachiSettings packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionHitachiSettingsPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionHitachiSettings_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionHitachiSettingsPacketStructure(pkt, &user))
    {
        report = "OrionHitachiSettings packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionHitachiSettings packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionHitachiSettings_t("name", &user);

    return report;

}// textPrintOrionHitachiSettingsPacket

/*!
 * Generate a string that describes the contents of a OrionSonySettings_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionSonySettings_t(QString prename, const OrionSonySettings_t* user)
{
    QString report;

    report += prename + ":Index"  + " '" + QString::number(user->Index) + "'\n";

    report += prename + ":MinExposure"  + " '" + QString::number(user->MinExposure, 'g', 16) + "'\n";

    report += prename + ":MaxExposure"  + " '" + QString::number(user->MaxExposure, 'g', 16) + "'\n";

    report += prename + ":MinGain"  + " '" + QString::number(user->MinGain) + "'\n";

    report += prename + ":MaxGain"  + " '" + QString::number(user->MaxGain) + "'\n";

    report += prename + ":Brightness"  + " '" + QString::number(user->Brightness) + "'\n";

    report += prename + ":Contrast"  + " '" + QString::number(user->Contrast, 'g', 16) + "'\n";

    report += prename + ":Saturation"  + " '" + QString::number(user->Saturation, 'g', 16) + "'\n";

    report += prename + ":Sharpness"  + " '" + QString::number(user->Sharpness, 'g', 16) + "'\n";

    report += prename + ":FrameRate"  + " '" + QString::number(user->FrameRate, 'g', 16) + "'\n";

    return report;

}// textPrintOrionSonySettings_t

/*!
 * Generate a string that describes the contents of a OrionSonySettings packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionSonySettingsPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionSonySettings_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionSonySettingsPacketStructure(pkt, &user))
    {
        report = "OrionSonySettings packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionSonySettings packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionSonySettings_t("name", &user);

    return report;

}// textPrintOrionSonySettingsPacket

/*!
 * Generate a string that describes the contents of a OrionUartConfig_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionUartConfig_t(QString prename, const OrionUartConfig_t* user)
{
    QString report;

    report += prename + ":port"  + " '" + QString::number(user->port) + "'\n";

    report += prename + ":baud"  + " '" + QString::number(user->baud) + "'\n";

    report += prename + ":protocol"  + " '" + QString::number(user->protocol) + "'\n";

    return report;

}// textPrintOrionUartConfig_t

/*!
 * Generate a string that describes the contents of a OrionUartConfig packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionUartConfigPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionUartConfig_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionUartConfigPacketStructure(pkt, &user))
    {
        report = "OrionUartConfig packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionUartConfig packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionUartConfig_t("name", &user);

    return report;

}// textPrintOrionUartConfigPacket

/*!
 * Generate a string that describes the contents of a OrionLimitsData_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionLimitsData_t(QString prename, const OrionLimitsData_t* user)
{
    QString report;
    int i = 0;

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":MinPos"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->MinPos[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":MaxPos"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->MaxPos[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":MaxVel"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->MaxVel[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":MaxAccel"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->MaxAccel[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":ContCur"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->ContCur[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":PeakCur"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->PeakCur[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":PeakCurTime"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->PeakCurTime[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":InitCur"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->InitCur[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":MaxPower"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->MaxPower[i], 'g', 16) + "'\n";

    return report;

}// textPrintOrionLimitsData_t

/*!
 * Generate a string that describes the contents of a OrionLimitsData packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionLimitsDataPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionLimitsData_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionLimitsDataPacketStructure(pkt, &user))
    {
        report = "OrionLimitsData packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionLimitsData packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionLimitsData_t("name", &user);

    return report;

}// textPrintOrionLimitsDataPacket

/*!
 * Generate a string that describes the contents of a InsOptions_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintInsOptions_t(QString prename, const InsOptions_t* user)
{
    QString report;
    int i = 0;

    report += prename + ":enablePlatformRotation"  + " '" + QString::number(user->enablePlatformRotation) + "'\n";

    report += prename + ":enableCourseIsHeading"  + " '" + QString::number(user->enableCourseIsHeading) + "'\n";

    report += prename + ":disableMagnetometer"  + " '" + QString::number(user->disableMagnetometer) + "'\n";

    report += prename + ":disableGPS"  + " '" + QString::number(user->disableGPS) + "'\n";

    report += prename + ":resetINS"  + " '" + QString::number(user->resetINS) + "'\n";

    report += prename + ":disableGpsClockError"  + " '" + QString::number(user->disableGpsClockError) + "'\n";

    report += prename + ":enableAccelBias"  + " '" + QString::number(user->enableAccelBias) + "'\n";

    report += prename + ":enableTightlyCoupled"  + " '" + QString::number(user->enableTightlyCoupled) + "'\n";

    report += prename + ":usePhaseForVelocity"  + " '" + QString::number(user->usePhaseForVelocity) + "'\n";

    report += prename + ":disableL1"  + " '" + QString::number(user->disableL1) + "'\n";

    report += prename + ":disableL2"  + " '" + QString::number(user->disableL2) + "'\n";

    report += prename + ":disableL5"  + " '" + QString::number(user->disableL5) + "'\n";

    report += prename + ":elevationMask"  + " '" + QString::number(user->elevationMask, 'g', 16) + "'\n";

    report += prename + ":enablePayloadIns"  + " '" + QString::number(user->enablePayloadIns) + "'\n";

    report += prename + ":enableNonLinearHeading"  + " '" + QString::number(user->enableNonLinearHeading) + "'\n";

    report += prename + ":enableSensonorMV"  + " '" + QString::number(user->enableSensonorMV) + "'\n";

    for(i = 0; i < NUM_AXES; i++)
        report += prename + ":gimbalToPlatformEuler"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->gimbalToPlatformEuler[i], 'g', 16) + "'\n";

    report += prename + ":initialHeading"  + " '" + QString::number(user->initialHeading, 'g', 16) + "'\n";

    for(i = 0; i < 3; i++)
        report += prename + ":gpsLeverArm"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->gpsLeverArm[i], 'g', 16) + "'\n";

    report += prename + ":headingObservationBiasAngle"  + " '" + QString::number(user->headingObservationBiasAngle, 'g', 16) + "'\n";

    return report;

}// textPrintInsOptions_t

/*!
 * Generate a string that describes the contents of a InsOptions packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintInsOptionsPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    InsOptions_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeInsOptionsPacketStructure(pkt, &user))
    {
        report = "InsOptions packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "InsOptions packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintInsOptions_t("name", &user);

    return report;

}// textPrintInsOptionsPacket

/*!
 * Generate a string that describes the contents of a OrionNetworkSettings_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionNetworkSettings_t(QString prename, const OrionNetworkSettings_t* user)
{
    QString report;

    report += prename + ":Ip"  + " '" + QString::number(user->Ip) + "'\n";

    report += prename + ":Mask"  + " '" + QString::number(user->Mask) + "'\n";

    report += prename + ":Gateway"  + " '" + QString::number(user->Gateway) + "'\n";

    report += prename + ":LowDelay"  + " '" + QString::number(user->LowDelay) + "'\n";

    report += prename + ":Mtu"  + " '" + QString::number(user->Mtu) + "'\n";

    return report;

}// textPrintOrionNetworkSettings_t

/*!
 * Generate a string that describes the contents of a OrionNetworkSettings packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionNetworkSettingsPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionNetworkSettings_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionNetworkSettingsPacketStructure(pkt, &user))
    {
        report = "OrionNetworkSettings packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionNetworkSettings packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionNetworkSettings_t("name", &user);

    return report;

}// textPrintOrionNetworkSettingsPacket

/*!
 * Generate a string that describes the contents of a OrionNetworkVideo_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionNetworkVideo_t(QString prename, const OrionNetworkVideo_t* user)
{
    QString report;

    report += prename + ":DestIp"  + " '" + QString::number(user->DestIp) + "'\n";

    report += prename + ":Port"  + " '" + QString::number(user->Port) + "'\n";

    report += prename + ":Bitrate"  + " '" + QString::number(user->Bitrate) + "'\n";

    report += prename + ":Ttl"  + " '" + QString::number(user->Ttl) + "'\n";

    report += prename + ":StreamType"  + " '" + QString::number(user->StreamType) + "'\n";

    report += prename + ":MjpegQuality"  + " '" + QString::number(user->MjpegQuality) + "'\n";

    report += prename + ":SaveSettings"  + " '" + QString::number(user->SaveSettings) + "'\n";

    report += prename + ":TsPacketCount"  + " '" + QString::number(user->TsPacketCount) + "'\n";

    return report;

}// textPrintOrionNetworkVideo_t

/*!
 * Generate a string that describes the contents of a OrionNetworkVideo packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionNetworkVideoPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionNetworkVideo_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionNetworkVideoPacketStructure(pkt, &user))
    {
        report = "OrionNetworkVideo packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionNetworkVideo packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionNetworkVideo_t("name", &user);

    return report;

}// textPrintOrionNetworkVideoPacket

//! Generate a string that describes the contents of a OrionCamSettings_t structure
QString textPrintOrionCamSettings_t(QString prename, const OrionCamSettings_t* user);

/*!
 * Generate a string that describes the contents of a OrionCamSettings_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionCamSettings_t(QString prename, const OrionCamSettings_t* user)
{
    QString report;
    int i = 0;

    report += prename + ":Gpio"  + " '" + QString::number(user->Gpio) + "'\n";

    report += prename + ":GpioActiveState"  + " '" + QString::number(user->GpioActiveState) + "'\n";

    report += prename + ":Type"  + " '" + QString::number(user->Type) + "'\n";

    report += prename + ":Proto"  + " '" + QString::number(user->Proto) + "'\n";

    report += prename + ":MinFocalLength"  + " '" + QString::number(user->MinFocalLength, 'g', 16) + "'\n";

    report += prename + ":MaxFocalLength"  + " '" + QString::number(user->MaxFocalLength, 'g', 16) + "'\n";

    report += prename + ":PixelPitch"  + " '" + QString::number(user->PixelPitch, 'g', 16) + "'\n";

    report += prename + ":ArrayWidth"  + " '" + QString::number(user->ArrayWidth) + "'\n";

    report += prename + ":ArrayHeight"  + " '" + QString::number(user->ArrayHeight) + "'\n";

    report += prename + ":FrameRate"  + " '" + QString::number(user->FrameRate, 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":AlignMin"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->AlignMin[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":AlignMax"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->AlignMax[i], 'g', 16) + "'\n";

    return report;

}// textPrintOrionCamSettings_t

/*!
 * Generate a string that describes the contents of a OrionCameras_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionCameras_t(QString prename, const OrionCameras_t* user)
{
    QString report;
    int i = 0;

    report += prename + ":NumCameras"  + " '" + QString::number(user->NumCameras) + "'\n";

    // Camera settings information
    for(i = 0; i < NUM_CAMERAS; i++)
        report += textPrintOrionCamSettings_t(prename + ":OrionCamSettings" + "[" + QString::number(i) + "]", &user->OrionCamSettings[i]);

    return report;

}// textPrintOrionCameras_t

/*!
 * Generate a string that describes the contents of a OrionCameras packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionCamerasPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionCameras_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionCamerasPacketStructure(pkt, &user))
    {
        report = "OrionCameras packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionCameras packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionCameras_t("name", &user);

    return report;

}// textPrintOrionCamerasPacket
// end of printOrionPublic.cpp
